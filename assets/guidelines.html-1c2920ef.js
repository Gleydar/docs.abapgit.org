import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as d,a as n,b as e,d as a,w as c,e as r}from"./app-f06601c3.js";const h={},p=n("h2",{id:"object-types",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#object-types","aria-hidden":"true"},"#"),e(" Object Types")],-1),u=n("em",null,"new",-1),b=n("em",null,"not",-1),_=r('<p>Exceptions for existing objects:</p><ul><li>Transaction <code>ZABAPGIT</code></li><li>Program <code>ZABAPGIT</code> and includes</li><li>Function group <code>ZABAPGIT_PARALLEL</code> for parallel serialization (only available in developer version)</li><li>MIME objects <code>ZABAPGIT_*</code> for UI (CSS, JS, and fonts)</li></ul><h2 id="conventions" tabindex="-1"><a class="header-anchor" href="#conventions" aria-hidden="true">#</a> Conventions</h2><h3 id="prefixing" tabindex="-1"><a class="header-anchor" href="#prefixing" aria-hidden="true">#</a> Prefixing</h3>',4),f={href:"http://docs.abapopenchecks.org/checks/69/",target:"_blank",rel:"noopener noreferrer"},g=n("h3",{id:"downport",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#downport","aria-hidden":"true"},"#"),e(" Downport")],-1),m=n("br",null,null,-1),y={href:"https://abaplint.org",target:"_blank",rel:"noopener noreferrer"},x=n("h3",{id:"pretty-printer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#pretty-printer","aria-hidden":"true"},"#"),e(" Pretty Printer")],-1),k={href:"http://docs.abapopenchecks.org/checks/06/",target:"_blank",rel:"noopener noreferrer"},v=r('<h3 id="dynpros" tabindex="-1"><a class="header-anchor" href="#dynpros" aria-hidden="true">#</a> Dynpros</h3><p>For the user interface, we are moving towards everything in HTML, ie. new Dynpro screens or the use of Dynpro screens should not be added to the source code.</p><h3 id="abaplint" tabindex="-1"><a class="header-anchor" href="#abaplint" aria-hidden="true">#</a> abaplint</h3><p>Pull requests must pass all abaplint configured checks before they can be merged.</p><h3 id="internationalization-i18n" tabindex="-1"><a class="header-anchor" href="#internationalization-i18n" aria-hidden="true">#</a> Internationalization (I18N)</h3><p>abapGit supports only the English language. Neither objects nor text literals are translated. Therefore, all objects shall be set to English as the original language<br> and text literals in the code shall be maintained in English.</p><p>Since there&#39;s only one language, using the <code>##NO_TEXT</code> pragma is not required and will actually lead to lint errors. The exceptions are global class and interface definitions,<br> where the pragmas are added automatically by <code>SE24/SE80</code>.</p>',7);function w(E,T){const i=o("RouterLink"),t=o("ExternalLinkIcon");return l(),d("div",null,[p,n("p",null,[e("abapGit is merged into a "),a(i,{to:"/user-guide/getting-started/install.html"},{default:c(()=>[e("stand-alone version")]),_:1}),e(". For this reason, the only allowed object types for "),u,e(" repository objects are classes and interfaces. In particular, function groups or modules must "),b,e(" be included.")]),_,n("p",null,[e("Variables are prefixed using the standard setting in "),n("a",f,[e("abapOpenChecks Naming Conventions"),a(t)])]),g,n("p",null,[e("abapGit is targeted for version 702, so the code should only contain expressions/statements that work on 702."),m,n("a",y,[e("abaplint"),a(t)]),e(" will automatically check every PR for language syntax that is not available on 702.")]),x,n("p",null,[e("Use pretty-printer, keywords upper case + indentation, "),n("a",k,[e("abapOpenChecks"),a(t)]),e(" can be used for checking this.")]),v])}const A=s(h,[["render",w],["__file","guidelines.html.vue"]]);export{A as default};
